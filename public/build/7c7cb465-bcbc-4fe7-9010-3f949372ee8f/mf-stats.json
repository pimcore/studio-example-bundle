{
  "id": "pimcore_studio_example_bundle",
  "name": "pimcore_studio_example_bundle",
  "metaData": {
    "name": "pimcore_studio_example_bundle",
    "type": "app",
    "buildInfo": {
      "buildVersion": "0.0.1",
      "buildName": "pimcore-studio-ui-demo-bundle"
    },
    "remoteEntry": {
      "name": "static/js/remoteEntry.js",
      "path": "",
      "type": "global"
    },
    "types": {
      "path": "",
      "name": "",
      "zip": "",
      "api": ""
    },
    "globalName": "pimcore_studio_example_bundle",
    "pluginVersion": "0.13.1",
    "prefetchInterface": false,
    "publicPath": "/bundles/pimcorestudioexample/build/7c7cb465-bcbc-4fe7-9010-3f949372ee8f/"
  },
  "shared": [
    {
      "singleton": true,
      "requiredVersion": "^*",
      "shareScope": "default",
      "eager": true,
      "name": "react",
      "version": "*",
      "id": "pimcore_studio_example_bundle:react",
      "assets": {
        "js": {
          "async": [],
          "sync": [
            "static/js/remoteEntry.js",
            "static/js/vendors-node_modules_react_index_js-_module-federation_runtime_rspack_js_data_text_javascript-1260da.js"
          ]
        },
        "css": {
          "async": [],
          "sync": []
        }
      },
      "usedIn": []
    },
    {
      "singleton": true,
      "requiredVersion": "6.1.x",
      "shareScope": "default",
      "eager": true,
      "version": "6.1.x",
      "name": "inversify",
      "id": "pimcore_studio_example_bundle:inversify",
      "assets": {
        "js": {
          "async": [],
          "sync": [
            "static/js/remoteEntry.js",
            "static/js/vendors-node_modules_react_index_js-_module-federation_runtime_rspack_js_data_text_javascript-1260da.js"
          ]
        },
        "css": {
          "async": [],
          "sync": []
        }
      },
      "usedIn": []
    }
  ],
  "remotes": [
    {
      "alias": "@pimcore/studio-ui-bundle",
      "consumingFederationContainerName": "pimcore_studio_example_bundle",
      "federationContainerName": "promise new Promise(resolve => {\n          const studioUIBundleRemoteUrl = window.StudioUIBundleRemoteUrl\n          const script = document.createElement('script')\n\n          let hasScript = false;\n\n          document.querySelectorAll('script').forEach((el) => {\n            const elPathname = el.src.replace(/https?:\\/\\/[^/]+/, '')\n            const studioUIBundleRemoteUrlPathname = studioUIBundleRemoteUrl.replace(/https?:\\/\\/[^/]+/, '')\n\n            if (elPathname === studioUIBundleRemoteUrlPathname) {\n              hasScript = true;\n              return;\n            }\n          })\n\n          if (hasScript) {\n            resolve({\n              get: (request) => window['pimcore_studio_ui_bundle'].get(request),\n              init: (...arg) => {\n                try {\n                  return window['pimcore_studio_ui_bundle'].init(...arg)\n                } catch(e) {\n                  console.log('remote container already initialized')\n                }\n              }\n            })\n            return\n          }\n\n          script.src = studioUIBundleRemoteUrl\n          script.onload = () => {\n            const proxy = {\n              get: (request) => window['pimcore_studio_ui_bundle'].get(request),\n              init: (...arg) => {\n                try {\n                  return window['pimcore_studio_ui_bundle'].init(...arg)\n                } catch(e) {\n                  console.log('remote container already initialized')\n                }\n              }\n            }\n            resolve(proxy)\n          }\n          document.head.appendChild(script);\n        })\n        ",
      "moduleName": ".",
      "usedIn": [
        "js/src/examples/api-data/modules/api-data-extension.tsx",
        "js/src/examples/asset-editor-toolbar-button/modules/asset-editor-toolbar-button-extension.ts",
        "js/src/examples/custom-icons/modules/custom-icon-extension.tsx",
        "js/src/examples/custom-widgets/modules/custom-widgets-extension.tsx",
        "js/src/examples/dynamic-types/modules/dynamic-types-extension.tsx",
        "js/src/examples/main-nav-entry/modules/main-nav-entry-extension.ts",
        "js/src/examples/tab-manager/modules/asset-folder-tab-exentsion.tsx",
        "js/src/examples/tab-manager/modules/object-preview-tab-extension.tsx"
      ],
      "version": "*"
    },
    {
      "alias": "@pimcore/studio-ui-bundle",
      "consumingFederationContainerName": "pimcore_studio_example_bundle",
      "federationContainerName": "promise new Promise(resolve => {\n          const studioUIBundleRemoteUrl = window.StudioUIBundleRemoteUrl\n          const script = document.createElement('script')\n\n          let hasScript = false;\n\n          document.querySelectorAll('script').forEach((el) => {\n            const elPathname = el.src.replace(/https?:\\/\\/[^/]+/, '')\n            const studioUIBundleRemoteUrlPathname = studioUIBundleRemoteUrl.replace(/https?:\\/\\/[^/]+/, '')\n\n            if (elPathname === studioUIBundleRemoteUrlPathname) {\n              hasScript = true;\n              return;\n            }\n          })\n\n          if (hasScript) {\n            resolve({\n              get: (request) => window['pimcore_studio_ui_bundle'].get(request),\n              init: (...arg) => {\n                try {\n                  return window['pimcore_studio_ui_bundle'].init(...arg)\n                } catch(e) {\n                  console.log('remote container already initialized')\n                }\n              }\n            })\n            return\n          }\n\n          script.src = studioUIBundleRemoteUrl\n          script.onload = () => {\n            const proxy = {\n              get: (request) => window['pimcore_studio_ui_bundle'].get(request),\n              init: (...arg) => {\n                try {\n                  return window['pimcore_studio_ui_bundle'].init(...arg)\n                } catch(e) {\n                  console.log('remote container already initialized')\n                }\n              }\n            }\n            resolve(proxy)\n          }\n          document.head.appendChild(script);\n        })\n        ",
      "moduleName": "app",
      "usedIn": [
        "js/src/examples/api-data/modules/api-data-extension.tsx",
        "js/src/examples/asset-editor-toolbar-button/modules/asset-editor-toolbar-button-extension.ts",
        "js/src/examples/custom-icons/modules/custom-icon-extension.tsx",
        "js/src/examples/custom-widgets/modules/custom-widgets-extension.tsx",
        "js/src/examples/dynamic-types/modules/dynamic-types-extension.tsx",
        "js/src/examples/main-nav-entry/modules/main-nav-entry-extension.ts",
        "js/src/examples/tab-manager/modules/asset-folder-tab-exentsion.tsx",
        "js/src/examples/tab-manager/modules/object-preview-tab-extension.tsx"
      ],
      "version": "*"
    },
    {
      "alias": "@pimcore/studio-ui-bundle",
      "consumingFederationContainerName": "pimcore_studio_example_bundle",
      "federationContainerName": "promise new Promise(resolve => {\n          const studioUIBundleRemoteUrl = window.StudioUIBundleRemoteUrl\n          const script = document.createElement('script')\n\n          let hasScript = false;\n\n          document.querySelectorAll('script').forEach((el) => {\n            const elPathname = el.src.replace(/https?:\\/\\/[^/]+/, '')\n            const studioUIBundleRemoteUrlPathname = studioUIBundleRemoteUrl.replace(/https?:\\/\\/[^/]+/, '')\n\n            if (elPathname === studioUIBundleRemoteUrlPathname) {\n              hasScript = true;\n              return;\n            }\n          })\n\n          if (hasScript) {\n            resolve({\n              get: (request) => window['pimcore_studio_ui_bundle'].get(request),\n              init: (...arg) => {\n                try {\n                  return window['pimcore_studio_ui_bundle'].init(...arg)\n                } catch(e) {\n                  console.log('remote container already initialized')\n                }\n              }\n            })\n            return\n          }\n\n          script.src = studioUIBundleRemoteUrl\n          script.onload = () => {\n            const proxy = {\n              get: (request) => window['pimcore_studio_ui_bundle'].get(request),\n              init: (...arg) => {\n                try {\n                  return window['pimcore_studio_ui_bundle'].init(...arg)\n                } catch(e) {\n                  console.log('remote container already initialized')\n                }\n              }\n            }\n            resolve(proxy)\n          }\n          document.head.appendChild(script);\n        })\n        ",
      "moduleName": "components",
      "usedIn": [
        "js/src/examples/api-data/components/api-data-widget.tsx",
        "js/src/examples/asset-editor-toolbar-button/components/custom-toolbar-button.tsx",
        "js/src/examples/custom-icons/components/custom-icons.tsx",
        "js/src/examples/custom-widgets/components/another-example-widget.tsx",
        "js/src/examples/custom-widgets/components/example-widget.tsx",
        "js/src/examples/dynamic-types/components/data-grid.tsx",
        "js/src/examples/dynamic-types/components/dynamic-types-widget.tsx",
        "js/src/examples/main-nav-entry/components/example-tool.tsx",
        "js/src/examples/tab-manager/components/example-tab.tsx",
        "js/src/examples/tab-manager/components/preview-tab.tsx",
        "js/src/examples/tab-manager/modules/asset-folder-tab-exentsion.tsx"
      ],
      "version": "*"
    },
    {
      "alias": "@pimcore/studio-ui-bundle",
      "consumingFederationContainerName": "pimcore_studio_example_bundle",
      "federationContainerName": "promise new Promise(resolve => {\n          const studioUIBundleRemoteUrl = window.StudioUIBundleRemoteUrl\n          const script = document.createElement('script')\n\n          let hasScript = false;\n\n          document.querySelectorAll('script').forEach((el) => {\n            const elPathname = el.src.replace(/https?:\\/\\/[^/]+/, '')\n            const studioUIBundleRemoteUrlPathname = studioUIBundleRemoteUrl.replace(/https?:\\/\\/[^/]+/, '')\n\n            if (elPathname === studioUIBundleRemoteUrlPathname) {\n              hasScript = true;\n              return;\n            }\n          })\n\n          if (hasScript) {\n            resolve({\n              get: (request) => window['pimcore_studio_ui_bundle'].get(request),\n              init: (...arg) => {\n                try {\n                  return window['pimcore_studio_ui_bundle'].init(...arg)\n                } catch(e) {\n                  console.log('remote container already initialized')\n                }\n              }\n            })\n            return\n          }\n\n          script.src = studioUIBundleRemoteUrl\n          script.onload = () => {\n            const proxy = {\n              get: (request) => window['pimcore_studio_ui_bundle'].get(request),\n              init: (...arg) => {\n                try {\n                  return window['pimcore_studio_ui_bundle'].init(...arg)\n                } catch(e) {\n                  console.log('remote container already initialized')\n                }\n              }\n            }\n            resolve(proxy)\n          }\n          document.head.appendChild(script);\n        })\n        ",
      "moduleName": "modules/app",
      "usedIn": [
        "js/src/examples/api-data/components/api-data-widget.tsx",
        "js/src/examples/asset-editor-toolbar-button/modules/asset-editor-toolbar-button-extension.ts"
      ],
      "version": "*"
    },
    {
      "alias": "@pimcore/studio-ui-bundle",
      "consumingFederationContainerName": "pimcore_studio_example_bundle",
      "federationContainerName": "promise new Promise(resolve => {\n          const studioUIBundleRemoteUrl = window.StudioUIBundleRemoteUrl\n          const script = document.createElement('script')\n\n          let hasScript = false;\n\n          document.querySelectorAll('script').forEach((el) => {\n            const elPathname = el.src.replace(/https?:\\/\\/[^/]+/, '')\n            const studioUIBundleRemoteUrlPathname = studioUIBundleRemoteUrl.replace(/https?:\\/\\/[^/]+/, '')\n\n            if (elPathname === studioUIBundleRemoteUrlPathname) {\n              hasScript = true;\n              return;\n            }\n          })\n\n          if (hasScript) {\n            resolve({\n              get: (request) => window['pimcore_studio_ui_bundle'].get(request),\n              init: (...arg) => {\n                try {\n                  return window['pimcore_studio_ui_bundle'].init(...arg)\n                } catch(e) {\n                  console.log('remote container already initialized')\n                }\n              }\n            })\n            return\n          }\n\n          script.src = studioUIBundleRemoteUrl\n          script.onload = () => {\n            const proxy = {\n              get: (request) => window['pimcore_studio_ui_bundle'].get(request),\n              init: (...arg) => {\n                try {\n                  return window['pimcore_studio_ui_bundle'].init(...arg)\n                } catch(e) {\n                  console.log('remote container already initialized')\n                }\n              }\n            }\n            resolve(proxy)\n          }\n          document.head.appendChild(script);\n        })\n        ",
      "moduleName": "modules/element",
      "usedIn": [
        "js/src/examples/dynamic-types/dynamic-types/definitions/live-updating-cell.tsx"
      ],
      "version": "*"
    },
    {
      "alias": "@pimcore/studio-ui-bundle",
      "consumingFederationContainerName": "pimcore_studio_example_bundle",
      "federationContainerName": "promise new Promise(resolve => {\n          const studioUIBundleRemoteUrl = window.StudioUIBundleRemoteUrl\n          const script = document.createElement('script')\n\n          let hasScript = false;\n\n          document.querySelectorAll('script').forEach((el) => {\n            const elPathname = el.src.replace(/https?:\\/\\/[^/]+/, '')\n            const studioUIBundleRemoteUrlPathname = studioUIBundleRemoteUrl.replace(/https?:\\/\\/[^/]+/, '')\n\n            if (elPathname === studioUIBundleRemoteUrlPathname) {\n              hasScript = true;\n              return;\n            }\n          })\n\n          if (hasScript) {\n            resolve({\n              get: (request) => window['pimcore_studio_ui_bundle'].get(request),\n              init: (...arg) => {\n                try {\n                  return window['pimcore_studio_ui_bundle'].init(...arg)\n                } catch(e) {\n                  console.log('remote container already initialized')\n                }\n              }\n            })\n            return\n          }\n\n          script.src = studioUIBundleRemoteUrl\n          script.onload = () => {\n            const proxy = {\n              get: (request) => window['pimcore_studio_ui_bundle'].get(request),\n              init: (...arg) => {\n                try {\n                  return window['pimcore_studio_ui_bundle'].init(...arg)\n                } catch(e) {\n                  console.log('remote container already initialized')\n                }\n              }\n            }\n            resolve(proxy)\n          }\n          document.head.appendChild(script);\n        })\n        ",
      "moduleName": "modules/asset",
      "usedIn": [
        "js/src/examples/asset-editor-toolbar-button/components/custom-toolbar-button.tsx"
      ],
      "version": "*"
    },
    {
      "alias": "@pimcore/studio-ui-bundle",
      "consumingFederationContainerName": "pimcore_studio_example_bundle",
      "federationContainerName": "promise new Promise(resolve => {\n          const studioUIBundleRemoteUrl = window.StudioUIBundleRemoteUrl\n          const script = document.createElement('script')\n\n          let hasScript = false;\n\n          document.querySelectorAll('script').forEach((el) => {\n            const elPathname = el.src.replace(/https?:\\/\\/[^/]+/, '')\n            const studioUIBundleRemoteUrlPathname = studioUIBundleRemoteUrl.replace(/https?:\\/\\/[^/]+/, '')\n\n            if (elPathname === studioUIBundleRemoteUrlPathname) {\n              hasScript = true;\n              return;\n            }\n          })\n\n          if (hasScript) {\n            resolve({\n              get: (request) => window['pimcore_studio_ui_bundle'].get(request),\n              init: (...arg) => {\n                try {\n                  return window['pimcore_studio_ui_bundle'].init(...arg)\n                } catch(e) {\n                  console.log('remote container already initialized')\n                }\n              }\n            })\n            return\n          }\n\n          script.src = studioUIBundleRemoteUrl\n          script.onload = () => {\n            const proxy = {\n              get: (request) => window['pimcore_studio_ui_bundle'].get(request),\n              init: (...arg) => {\n                try {\n                  return window['pimcore_studio_ui_bundle'].init(...arg)\n                } catch(e) {\n                  console.log('remote container already initialized')\n                }\n              }\n            }\n            resolve(proxy)\n          }\n          document.head.appendChild(script);\n        })\n        ",
      "moduleName": "modules/widget-manager",
      "usedIn": [
        "js/src/examples/custom-widgets/components/example-widget.tsx"
      ],
      "version": "*"
    },
    {
      "alias": "@pimcore/studio-ui-bundle",
      "consumingFederationContainerName": "pimcore_studio_example_bundle",
      "federationContainerName": "promise new Promise(resolve => {\n          const studioUIBundleRemoteUrl = window.StudioUIBundleRemoteUrl\n          const script = document.createElement('script')\n\n          let hasScript = false;\n\n          document.querySelectorAll('script').forEach((el) => {\n            const elPathname = el.src.replace(/https?:\\/\\/[^/]+/, '')\n            const studioUIBundleRemoteUrlPathname = studioUIBundleRemoteUrl.replace(/https?:\\/\\/[^/]+/, '')\n\n            if (elPathname === studioUIBundleRemoteUrlPathname) {\n              hasScript = true;\n              return;\n            }\n          })\n\n          if (hasScript) {\n            resolve({\n              get: (request) => window['pimcore_studio_ui_bundle'].get(request),\n              init: (...arg) => {\n                try {\n                  return window['pimcore_studio_ui_bundle'].init(...arg)\n                } catch(e) {\n                  console.log('remote container already initialized')\n                }\n              }\n            })\n            return\n          }\n\n          script.src = studioUIBundleRemoteUrl\n          script.onload = () => {\n            const proxy = {\n              get: (request) => window['pimcore_studio_ui_bundle'].get(request),\n              init: (...arg) => {\n                try {\n                  return window['pimcore_studio_ui_bundle'].init(...arg)\n                } catch(e) {\n                  console.log('remote container already initialized')\n                }\n              }\n            }\n            resolve(proxy)\n          }\n          document.head.appendChild(script);\n        })\n        ",
      "moduleName": "api/asset",
      "usedIn": [
        "js/src/examples/api-data/components/api-data-widget.tsx"
      ],
      "version": "*"
    }
  ],
  "exposes": [
    {
      "path": ".",
      "id": "pimcore_studio_example_bundle:.",
      "name": ".",
      "requires": [],
      "file": "js/src/plugins.ts",
      "assets": {
        "js": {
          "sync": [
            "static/js/async/vendors-node_modules_react_jsx-dev-runtime_js-node_modules_tslib_tslib_es6_mjs.js",
            "static/js/async/__federation_expose_default_export.js"
          ],
          "async": []
        },
        "css": {
          "sync": [],
          "async": []
        }
      }
    }
  ]
}